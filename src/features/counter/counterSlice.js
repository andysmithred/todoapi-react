import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
  value: 1,
  status: "idle",
};

// this should really be in a separate file as it is nothing to do with redux, can't be bothered
const fetchCount = (amount = 1) => {
  return new Promise((resolve) => {
    setTimeout(() => resolve({ data: amount }), 1000);
  });
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};
// Remember thunks are used to make async calls 
// Good def
// Redux Thunk is a middleware that lets you call action creators that return a function instead of an action object. 
// That function receives the store’s dispatch method, which is then used to dispatch regular synchronous actions inside the 
// function’s body once the asynchronous operations have been completed.

// A selector for selecting state
export const selectCount = (state) => state.counter.value;
export const selectStatus = (state) => state.counter.status;

// export the reducer
export default counterSlice.reducer;
